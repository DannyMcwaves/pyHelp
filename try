MAIN:
this is just a simple introduction to the notes package.
the notes module, is just a simple package that is supposed to relieve people of the
stress of creating README *.md *.txt or getting help on a specific module by utilising
the doc strings provided in any module. the docstrings could be the main docstrings on the
start of a document in a class or a function.

**  DOCSTRINGS START AND END WITH THREE COMMA'S AS SO.
    """
       any help on a particular object you are trying hard to write
       should be in this enclosed string. every pythonista knows how
       to write docs.
    """

USAGE fo Notes:
    from notes import Notes

    NB: the module you are going to use is supposed to expose a set of api's
        (functions and classes in the all variable)
        ie. __all__ = ["class", "anotherClass", "function1", "function2"]
        the order in which you display them is the order in which the docstrings will be generated.

    these are the two constants you need to pass to the Notes Object. You don't have to pass anything else.
    but make sure all is defined so as to create help for it.

    *** notes = Notes(globals(), __all__)

    *** docs = notes()
    -- call notes to get the docs on all the passed api's. (1)

    *** print(docs)
    -- docs is the full docs on the modules you passed (2)

    *** notes(print)
    -- Is the same as the lines (1) and (2)
    -- You can pass and callback function that will operate on the docs.

    *** notes += "any other thing you are willing to add to the docstring before you operate on it".
    --you can edit the docs on the go and then add more to it

    *** notes.save(name)
    -- This is the one that save the docs to a file. if no, name is provided,
    -- It uses README.txt


CLASS : Notes
        so this is the main class that implements all the methods of the notes thingy.
        this is supposed to be rather simple, succinct and concise.
    
	METHOD: 	__init__
	__doc__: No documentation for the this METHOD

	METHOD: 	file
	__doc__: 
        this should return a file rep for the whole module.
        every single line in the code.
        :return:
        

	METHOD: 	__class_exec
	__doc__: 
        this will return the name of the function and all other methods it contains and the docstrings
        of the functions and the class itself including any other other classes contained within this
        class.
        :param _class: the class to be passed around and extracted from.
        :return:
        

	METHOD: 	__run
	__doc__: 
        so this run for all the objects in the api's list argument provided.
        :return: None
        

	METHOD: 	save
	__doc__: 
        if you want to save the content of the docs to a file
        :param name: then pass the name as the parameter of the file you wanna save else I am using readme.txt
        :return:
        

	METHOD: 	__eval__
	__doc__: 
        this is to check if the api is available in this current module
        :param api: the api to check for
        :return: return the mem rep for the api from globals
        

	METHOD: 	__func_exec
	__doc__: 
        this will return the name and the docstring of the function as a single string.
        :param function: the name of the function
        :return: name + docstring of the function as a single string.
        

	METHOD: 	__call__
	__doc__: 
        I am not saying that this is asynchronous programming, but callback should definitely be passed
        for use with the docs.
        :callback: a callback function to be executed
        :return:
        

	METHOD: 	__iadd__
	__doc__: No documentation for the this METHOD

	METHOD: 	__test_type
	__doc__: 
        to check for the matching type. class will match a class and then function will match a function
        :param other: an object.
        :return: True or False
        

	CLASS : Notes.Danny
        who is going to stop me now
        
		METHOD: 	__init__
		__doc__: 
            oooooooooooh my God.
            

		CLASS : Notes.Danny.Me
            Is this the fault of the squabble in the code
            
			METHOD: 	__init__
			__doc__: 
                another small crazy trial
                

			METHOD: 	__str__
			__doc__: 
                an str rep of the name of the user.
                :return:
                

FUNCTION : 	pprint
__doc__: Pretty-print a Python object to a stream [default is sys.stdout].

Owner: Danny Mcwaves